datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  STUDENT
}

enum UserStatus {
  STAYING
  NOT_STAYING
  BANNED
}

enum RoomStatus {
  FULL
  AVAILABLE
}

enum Gender {
  MALE
  FEMALE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id                String              @id
  name              String?
  gender            Gender              @default(FEMALE)
  email             String?             @unique
  password          String?
  role              UserRole            @default(STUDENT)
  status            UserStatus          @default(NOT_STAYING)
  currentRoomId     String?
  amountPaid        Float?
  amountDue         Float?
  Room              Room?               @relation(fields: [currentRoomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Contracts         Contract[]
  Feedbacks         Feedback[]
  emailVerified     DateTime?
  failedAttempts    Int                 @default(0)
  lastFailedAttempt DateTime?
  lockoutUntil      DateTime?
  twoFA             Boolean             @default(true)
  RoomChangeRequests RoomChangeRequest[] @relation("UserRoomChangeRequests")

  @@index([currentRoomId])
}

model Room {
  id                     String              @id
  status                 RoomStatus          @default(AVAILABLE)
  gender                 Gender              @default(FEMALE)
  current                Int
  max                    Int
  price                  Float
  Facilities             Facility[]
  Users                  User[]
  Contracts              Contract[]
  Invoices               Invoice[]
  FromRoomChangeRequests RoomChangeRequest[] @relation("RoomChangeRequestFromRoom")
  ToRoomChangeRequests   RoomChangeRequest[] @relation("RoomChangeRequestToRoom")
}

model RoomChangeRequest {
  id         String        @id @default(cuid())
  userId     String
  fromRoomId String?
  toRoomId   String
  status     RequestStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  User       User          @relation("UserRoomChangeRequests", fields: [userId], references: [id])
  FromRoom   Room?         @relation("RoomChangeRequestFromRoom", fields: [fromRoomId], references: [id])
  ToRoom     Room          @relation("RoomChangeRequestToRoom", fields: [toRoomId], references: [id])

  @@index([userId])
  @@index([fromRoomId])
  @@index([toRoomId])
}

model Facility {
  id            Int    @id @default(autoincrement())
  name          String
  number        Int
  currentRoomId String
  status        String
  price         Float
  Room          Room   @relation(fields: [currentRoomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Contract {
  id         Int      @id @default(autoincrement())
  contractType String
  userId       String
  roomId       String
  term         String
  startDate    DateTime
  endDate      DateTime
  User         User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Room         Room      @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Invoices     Invoice[]
}

model Invoice {
  id         Int      @id @default(autoincrement())
  roomId     String
  contractId Int
  amountPaid Float
  amountDue  Float
  Room       Room     @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Feedback {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFAToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}